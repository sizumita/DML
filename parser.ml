type token =
  | BOOL of (bool)
  | NUM of (int)
  | STR of (string)
  | ID of (string)
  | SPACE of (string)
  | FLOAT of (float)
  | NOT
  | FUN
  | ARROW
  | EQUAL
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | LET
  | NOT_EQUAL
  | GREATER_EQUAL
  | LESS_EQUAL
  | LESS
  | GREATER
  | NAMESPACE
  | LS
  | RS
  | LB
  | RB
  | BAR
  | TYPE
  | OF
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | RP
  | LP
  | COMMA
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

open Printf
open Ast

let fold_fun args exp =
     List.fold_left (fun a b -> Fun (b, a)) exp args

# 50 "parser.ml"
let yytransl_const = [|
  263 (* NOT *);
  264 (* FUN *);
  265 (* ARROW *);
  266 (* EQUAL *);
  267 (* SEMICOLON *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LET *);
  272 (* NOT_EQUAL *);
  273 (* GREATER_EQUAL *);
  274 (* LESS_EQUAL *);
  275 (* LESS *);
  276 (* GREATER *);
  277 (* NAMESPACE *);
  278 (* LS *);
  279 (* RS *);
  280 (* LB *);
  281 (* RB *);
  282 (* BAR *);
  283 (* TYPE *);
  284 (* OF *);
  285 (* PLUS *);
  286 (* MINUS *);
  287 (* TIMES *);
  288 (* DIV *);
  289 (* RP *);
  290 (* LP *);
  291 (* COMMA *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* NUM *);
  259 (* STR *);
  260 (* ID *);
  261 (* SPACE *);
  262 (* FLOAT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\003\000\003\000\
\003\000\009\000\009\000\009\000\010\000\010\000\011\000\012\000\
\012\000\012\000\012\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\008\000\008\000\013\000\
\013\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\003\000\001\000\001\000\002\000\003\000\
\002\000\003\000\001\000\001\000\003\000\003\000\005\000\004\000\
\004\000\004\000\003\000\001\000\001\000\003\000\003\000\003\000\
\003\000\001\000\001\000\001\000\001\000\004\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\002\000\002\000\001\000\002\000\001\000\002\000\
\001\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\003\000\000\000\
\000\000\001\000\002\000\047\000\000\000\000\000\000\000\045\000\
\011\000\005\000\006\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\046\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\
\009\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\000\000\014\000\000\000\
\000\000\023\000\010\000\008\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\019\000\000\000\000\000\000\000\025\000\000\000\018\000\
\000\000\000\000"

let yydgoto = "\002\000\
\005\000\006\000\007\000\000\000\043\000\029\000\030\000\014\000\
\036\000\037\000\031\000\047\000\053\000"

let yysindex = "\015\000\
\060\255\000\000\021\255\047\255\000\000\030\000\000\000\011\255\
\064\255\000\000\000\000\000\000\155\255\014\255\000\255\000\000\
\000\000\000\000\000\000\089\255\000\000\155\255\072\255\155\255\
\155\255\058\255\155\255\120\255\027\255\052\002\000\000\000\000\
\155\255\040\255\000\255\051\255\000\000\074\255\052\002\052\002\
\010\255\188\255\077\255\052\002\000\000\052\002\023\255\063\255\
\000\000\017\255\164\255\000\000\027\255\155\255\155\255\155\255\
\155\255\155\255\155\255\155\255\155\255\155\255\155\255\052\002\
\078\255\073\255\079\255\000\000\155\255\155\255\000\000\155\255\
\058\255\000\000\000\000\000\000\000\000\086\255\052\002\086\255\
\086\255\086\255\086\255\247\254\247\254\063\255\063\255\000\000\
\079\255\000\000\052\002\211\255\052\002\000\000\052\002\000\000\
\155\255\052\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\087\001\002\000\000\000\000\000\
\000\000\153\001\000\000\037\000\000\000\000\000\148\001\183\001\
\000\000\000\000\000\000\111\255\000\000\044\255\000\000\001\000\
\000\000\000\000\068\255\000\000\113\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\107\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\176\000\218\001\211\000\
\246\000\025\001\060\001\106\000\141\000\036\000\071\000\000\000\
\000\000\000\000\253\001\000\000\110\255\000\000\061\255\000\000\
\000\000\032\002"

let yygindex = "\000\000\
\000\000\000\000\250\255\000\000\070\000\230\255\240\255\081\000\
\073\000\202\255\000\000\000\000\000\000"

let yytablesize = 852
let yytable = "\011\000\
\043\000\016\000\052\000\039\000\034\000\040\000\055\000\042\000\
\044\000\046\000\048\000\051\000\090\000\032\000\012\000\001\000\
\064\000\032\000\069\000\045\000\013\000\062\000\063\000\033\000\
\008\000\035\000\077\000\017\000\018\000\010\000\019\000\020\000\
\021\000\073\000\096\000\034\000\017\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\074\000\
\025\000\075\000\009\000\072\000\091\000\092\000\026\000\093\000\
\095\000\016\000\017\000\018\000\028\000\019\000\020\000\021\000\
\022\000\023\000\094\000\065\000\026\000\024\000\035\000\024\000\
\003\000\015\000\003\000\012\000\067\000\068\000\055\000\025\000\
\098\000\026\000\088\000\034\000\004\000\024\000\004\000\027\000\
\016\000\017\000\018\000\028\000\019\000\020\000\021\000\022\000\
\023\000\050\000\089\000\071\000\024\000\055\000\051\000\041\000\
\000\000\032\000\015\000\066\000\000\000\038\000\025\000\072\000\
\026\000\000\000\060\000\061\000\062\000\063\000\027\000\016\000\
\017\000\018\000\028\000\019\000\020\000\021\000\022\000\023\000\
\000\000\000\000\000\000\024\000\050\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\025\000\050\000\026\000\
\050\000\051\000\000\000\000\000\000\000\027\000\000\000\000\000\
\049\000\028\000\016\000\017\000\018\000\000\000\019\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\000\000\036\000\
\025\000\000\000\026\000\055\000\056\000\057\000\058\000\059\000\
\027\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\060\000\061\000\062\000\063\000\076\000\054\000\000\000\000\000\
\070\000\000\000\000\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\060\000\061\000\062\000\063\000\054\000\000\000\000\000\000\000\
\097\000\000\000\055\000\056\000\057\000\058\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\061\000\062\000\063\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\043\000\000\000\043\000\043\000\043\000\000\000\
\000\000\000\000\043\000\043\000\016\000\043\000\043\000\043\000\
\016\000\043\000\043\000\043\000\043\000\000\000\043\000\043\000\
\038\000\043\000\016\000\043\000\016\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\034\000\034\000\000\000\034\000\
\034\000\034\000\000\000\000\000\003\000\034\000\034\000\017\000\
\034\000\034\000\034\000\017\000\034\000\034\000\034\000\034\000\
\004\000\034\000\034\000\039\000\034\000\017\000\034\000\017\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\035\000\
\035\000\000\000\035\000\035\000\035\000\000\000\000\000\000\000\
\035\000\035\000\000\000\035\000\035\000\035\000\028\000\035\000\
\035\000\035\000\035\000\000\000\035\000\035\000\000\000\035\000\
\000\000\035\000\000\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\032\000\032\000\000\000\032\000\032\000\032\000\
\044\000\000\000\000\000\032\000\032\000\015\000\032\000\032\000\
\032\000\015\000\032\000\032\000\032\000\032\000\000\000\032\000\
\032\000\000\000\032\000\015\000\032\000\015\000\032\000\032\000\
\000\000\000\000\032\000\032\000\032\000\033\000\033\000\000\000\
\033\000\033\000\033\000\007\000\000\000\000\000\033\000\033\000\
\021\000\033\000\033\000\033\000\000\000\033\000\033\000\033\000\
\033\000\000\000\033\000\033\000\000\000\033\000\000\000\033\000\
\000\000\033\000\033\000\000\000\000\000\033\000\033\000\033\000\
\036\000\036\000\000\000\036\000\036\000\036\000\031\000\000\000\
\000\000\036\000\036\000\000\000\036\000\036\000\036\000\000\000\
\036\000\036\000\036\000\036\000\000\000\036\000\036\000\000\000\
\036\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
\036\000\036\000\036\000\041\000\041\000\000\000\041\000\041\000\
\041\000\037\000\000\000\000\000\041\000\041\000\000\000\041\000\
\041\000\041\000\000\000\041\000\041\000\041\000\041\000\000\000\
\041\000\041\000\000\000\041\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\041\000\041\000\041\000\040\000\040\000\
\000\000\040\000\040\000\040\000\030\000\000\000\000\000\040\000\
\040\000\000\000\040\000\040\000\040\000\000\000\040\000\040\000\
\040\000\040\000\000\000\040\000\040\000\000\000\040\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\
\040\000\038\000\038\000\000\000\038\000\038\000\038\000\042\000\
\000\000\000\000\038\000\038\000\000\000\038\000\038\000\038\000\
\000\000\038\000\038\000\038\000\038\000\000\000\038\000\038\000\
\000\000\038\000\000\000\038\000\000\000\000\000\000\000\000\000\
\000\000\038\000\038\000\038\000\039\000\039\000\000\000\039\000\
\039\000\039\000\000\000\000\000\000\000\039\000\039\000\000\000\
\039\000\039\000\039\000\000\000\039\000\039\000\039\000\039\000\
\000\000\039\000\039\000\000\000\039\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\039\000\039\000\039\000\000\000\
\028\000\028\000\000\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\000\000\000\000\028\000\000\000\028\000\
\000\000\028\000\000\000\028\000\028\000\028\000\028\000\028\000\
\000\000\028\000\044\000\044\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\000\000\000\000\044\000\
\000\000\044\000\000\000\044\000\000\000\044\000\044\000\044\000\
\044\000\044\000\000\000\044\000\007\000\007\000\000\000\007\000\
\007\000\007\000\000\000\000\000\000\000\000\000\007\000\000\000\
\007\000\007\000\007\000\021\000\000\000\000\000\000\000\021\000\
\000\000\007\000\007\000\000\000\007\000\000\000\007\000\000\000\
\000\000\021\000\021\000\021\000\007\000\007\000\007\000\031\000\
\031\000\000\000\031\000\031\000\031\000\000\000\000\000\000\000\
\000\000\031\000\000\000\031\000\031\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\031\000\031\000\000\000\031\000\
\000\000\031\000\000\000\000\000\000\000\000\000\000\000\031\000\
\031\000\031\000\037\000\037\000\000\000\037\000\037\000\037\000\
\000\000\000\000\000\000\000\000\037\000\000\000\037\000\037\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\037\000\000\000\037\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\037\000\037\000\037\000\030\000\030\000\000\000\
\030\000\030\000\030\000\000\000\000\000\000\000\000\000\030\000\
\000\000\030\000\030\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\030\000\000\000\030\000\000\000\030\000\
\000\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\
\042\000\042\000\000\000\042\000\042\000\042\000\000\000\000\000\
\000\000\000\000\042\000\000\000\042\000\042\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\000\000\
\042\000\000\000\042\000\000\000\000\000\054\000\000\000\000\000\
\042\000\042\000\042\000\055\000\056\000\057\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\061\000\062\000\063\000"

let yycheck = "\006\000\
\000\000\000\000\029\000\020\000\005\001\022\000\016\001\024\000\
\025\000\026\000\027\000\028\000\067\000\004\001\004\001\001\000\
\033\000\004\001\009\001\026\000\010\001\031\001\032\001\010\001\
\004\001\026\001\053\000\001\001\002\001\000\000\004\001\005\001\
\006\001\011\001\089\000\000\000\000\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\025\001\
\022\001\033\001\004\001\035\001\069\000\070\000\011\001\072\000\
\073\000\000\001\001\001\002\001\034\001\004\001\005\001\006\001\
\007\001\008\001\073\000\028\001\025\001\012\001\000\000\011\001\
\015\001\010\001\015\001\004\001\026\001\004\001\016\001\022\001\
\097\000\024\001\005\001\005\001\027\001\025\001\027\001\030\001\
\000\001\001\001\002\001\034\001\004\001\005\001\006\001\007\001\
\008\001\028\000\026\001\023\001\012\001\016\001\035\001\023\000\
\255\255\000\000\000\000\035\000\255\255\021\001\022\001\035\001\
\024\001\255\255\029\001\030\001\031\001\032\001\030\001\000\001\
\001\001\002\001\034\001\004\001\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\012\001\023\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\022\001\033\001\024\001\
\035\001\035\001\255\255\255\255\255\255\030\001\255\255\255\255\
\033\001\034\001\000\001\001\001\002\001\255\255\004\001\005\001\
\006\001\007\001\008\001\255\255\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\255\255\010\001\255\255\000\000\
\022\001\255\255\024\001\016\001\017\001\018\001\019\001\020\001\
\030\001\255\255\255\255\255\255\034\001\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\010\001\255\255\255\255\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\010\001\255\255\255\255\255\255\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\006\001\255\255\
\255\255\255\255\010\001\011\001\011\001\013\001\014\001\015\001\
\015\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\000\000\025\001\025\001\027\001\027\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\001\001\002\001\255\255\004\001\
\005\001\006\001\255\255\255\255\015\001\010\001\011\001\011\001\
\013\001\014\001\015\001\015\001\017\001\018\001\019\001\020\001\
\027\001\022\001\023\001\000\000\025\001\025\001\027\001\027\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\001\001\
\002\001\255\255\004\001\005\001\006\001\255\255\255\255\255\255\
\010\001\011\001\255\255\013\001\014\001\015\001\000\000\017\001\
\018\001\019\001\020\001\255\255\022\001\023\001\255\255\025\001\
\255\255\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\001\001\002\001\255\255\004\001\005\001\006\001\
\000\000\255\255\255\255\010\001\011\001\011\001\013\001\014\001\
\015\001\015\001\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\255\255\025\001\025\001\027\001\027\001\029\001\030\001\
\255\255\255\255\033\001\034\001\035\001\001\001\002\001\255\255\
\004\001\005\001\006\001\000\000\255\255\255\255\010\001\011\001\
\000\000\013\001\014\001\015\001\255\255\017\001\018\001\019\001\
\020\001\255\255\022\001\023\001\255\255\025\001\255\255\027\001\
\255\255\029\001\030\001\255\255\255\255\033\001\034\001\035\001\
\001\001\002\001\255\255\004\001\005\001\006\001\000\000\255\255\
\255\255\010\001\011\001\255\255\013\001\014\001\015\001\255\255\
\017\001\018\001\019\001\020\001\255\255\022\001\023\001\255\255\
\025\001\255\255\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\035\001\001\001\002\001\255\255\004\001\005\001\
\006\001\000\000\255\255\255\255\010\001\011\001\255\255\013\001\
\014\001\015\001\255\255\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\255\255\025\001\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\035\001\001\001\002\001\
\255\255\004\001\005\001\006\001\000\000\255\255\255\255\010\001\
\011\001\255\255\013\001\014\001\015\001\255\255\017\001\018\001\
\019\001\020\001\255\255\022\001\023\001\255\255\025\001\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\001\001\002\001\255\255\004\001\005\001\006\001\000\000\
\255\255\255\255\010\001\011\001\255\255\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\255\255\025\001\255\255\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\035\001\001\001\002\001\255\255\004\001\
\005\001\006\001\255\255\255\255\255\255\010\001\011\001\255\255\
\013\001\014\001\015\001\255\255\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\255\255\025\001\255\255\027\001\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\255\255\
\010\001\011\001\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\010\001\011\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\001\001\002\001\255\255\004\001\
\005\001\006\001\255\255\255\255\255\255\255\255\011\001\255\255\
\013\001\014\001\015\001\011\001\255\255\255\255\255\255\015\001\
\255\255\022\001\023\001\255\255\025\001\255\255\027\001\255\255\
\255\255\025\001\026\001\027\001\033\001\034\001\035\001\001\001\
\002\001\255\255\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\011\001\255\255\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\023\001\255\255\025\001\
\255\255\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\035\001\001\001\002\001\255\255\004\001\005\001\006\001\
\255\255\255\255\255\255\255\255\011\001\255\255\013\001\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\023\001\255\255\025\001\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\001\001\002\001\255\255\
\004\001\005\001\006\001\255\255\255\255\255\255\255\255\011\001\
\255\255\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\255\255\025\001\255\255\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\035\001\
\001\001\002\001\255\255\004\001\005\001\006\001\255\255\255\255\
\255\255\255\255\011\001\255\255\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\023\001\255\255\
\025\001\255\255\027\001\255\255\255\255\010\001\255\255\255\255\
\033\001\034\001\035\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001"

let yynames_const = "\
  NOT\000\
  FUN\000\
  ARROW\000\
  EQUAL\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  NOT_EQUAL\000\
  GREATER_EQUAL\000\
  LESS_EQUAL\000\
  LESS\000\
  GREATER\000\
  NAMESPACE\000\
  LS\000\
  RS\000\
  LB\000\
  RB\000\
  BAR\000\
  TYPE\000\
  OF\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  RP\000\
  LP\000\
  COMMA\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  NUM\000\
  STR\000\
  ID\000\
  SPACE\000\
  FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 39 "parser.mly"
                 ( _1 )
# 432 "parser.ml"
               : Ast.expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 42 "parser.mly"
                   ( _1 @ [_2] )
# 440 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 43 "parser.mly"
             ( [_1] )
# 447 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elems) in
    Obj.repr(
# 46 "parser.mly"
                    ( _2 )
# 454 "parser.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 48 "parser.mly"
                         ( Int _1 )
# 461 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 49 "parser.mly"
                         ( Var _1 )
# 468 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                         ( TypeVar (_1, _2) )
# 476 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                         ( _2 )
# 483 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
                         ( Unit )
# 489 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elems) in
    Obj.repr(
# 53 "parser.mly"
                                           ( Tuple _2 )
# 496 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 54 "parser.mly"
                         ( Bool _1 )
# 503 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 55 "parser.mly"
                         ( Float _1 )
# 510 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                                 ( NameSpace (_1, _3) )
# 518 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elems) in
    Obj.repr(
# 57 "parser.mly"
                          ( List _2 )
# 525 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fargs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                                              ( Assign (_2, fold_fun _3 _5) )
# 534 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                                        ( Assign (_2, _4) )
# 542 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 63 "parser.mly"
                           ( Types (_2, _4) )
# 550 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'types) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typed) in
    Obj.repr(
# 66 "parser.mly"
                            ( _2 @ [_4] )
# 558 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typed) in
    Obj.repr(
# 67 "parser.mly"
                        ( _1 @ [_3] )
# 566 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typed) in
    Obj.repr(
# 68 "parser.mly"
              ( [_1] )
# 573 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parser.mly"
              ( Type _1 )
# 580 "parser.ml"
               : 'typed))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                       ( Typeof (_1, _3) )
# 588 "parser.ml"
               : 'typed))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bcontents) in
    Obj.repr(
# 73 "parser.mly"
                        ( Block _2 )
# 595 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bcontents) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                                     ( _1 @ [_3] )
# 603 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bcontents) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 76 "parser.mly"
                                     ( _1 @ [_3] )
# 611 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                 ( [_1] )
# 618 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 78 "parser.mly"
                 ( [_1] )
# 625 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 82 "parser.mly"
                   ( _1 )
# 632 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 83 "parser.mly"
             ( _1 )
# 639 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                            ( fold_fun _2 _4 )
# 647 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                ( Call (Var "!", [_2]) )
# 654 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                      ( Call (Var ("+"), [_1; _3]) )
# 662 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                       ( Call (Var ("-"), [_1; _3]) )
# 670 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                       ( Call (Var ("*"), [_1; _3]) )
# 678 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                     ( Call (Var ("/"), [_1; _3]) )
# 686 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                       ( Call (Var ("="), [_1; _3]) )
# 694 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                           ( Call (Var ("<>"), [_1; _3]) )
# 702 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                      ( Call (Var ("<"), [_1; _3]) )
# 710 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                         ( Call (Var (">"), [_1; _3]) )
# 718 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                            ( Call (Var ("<="), [_1; _3]) )
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                               ( Call (Var (">="), [_1; _3]) )
# 734 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                                 ( Call (Var ("if"), [_2; _4; _6]))
# 743 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                               ( Call (Var ("-"), [Int (0); _2]) )
# 750 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cargs) in
    Obj.repr(
# 98 "parser.mly"
                                        ( Call (_1, _2) )
# 758 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
          ( failwith 
               (Printf.sprintf "parse error near characters %d-%d"
                    (Parsing.symbol_start ())
                    (Parsing.symbol_end ())) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fargs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                 ( _1@ [_2] )
# 775 "parser.ml"
               : 'fargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                 ( [_1] )
# 782 "parser.ml"
               : 'fargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cargs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 110 "parser.mly"
                                         ( _1 @ [_2] )
# 790 "parser.ml"
               : 'cargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 111 "parser.mly"
                                         ( [_1] )
# 797 "parser.ml"
               : 'cargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                        ( _1 @ [_3] )
# 805 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
            ( [_1] )
# 812 "parser.ml"
               : 'elems))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr list)
;;

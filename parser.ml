type token =
  | BOOL of (bool)
  | NUM of (int)
  | STR of (string)
  | ID of (string)
  | SPACE of (string)
  | FLOAT of (float)
  | NOT
  | FUN
  | ARROW
  | EQUAL
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | LET
  | IN
  | NOT_EQUAL
  | GREATER_EQUAL
  | LESS_EQUAL
  | LESS
  | GREATER
  | NAMESPACE
  | LS
  | RS
  | LB
  | RB
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | RP
  | LP
  | COMMA
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

open Printf
open Ast

let fold_fun args exp =
     List.fold_left (fun a b -> Fun (b, a)) exp args

# 48 "parser.ml"
let yytransl_const = [|
  263 (* NOT *);
  264 (* FUN *);
  265 (* ARROW *);
  266 (* EQUAL *);
  267 (* SEMICOLON *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LET *);
  272 (* IN *);
  273 (* NOT_EQUAL *);
  274 (* GREATER_EQUAL *);
  275 (* LESS_EQUAL *);
  276 (* LESS *);
  277 (* GREATER *);
  278 (* NAMESPACE *);
  279 (* LS *);
  280 (* RS *);
  281 (* LB *);
  282 (* RB *);
  283 (* PLUS *);
  284 (* MINUS *);
  285 (* TIMES *);
  286 (* DIV *);
  287 (* RP *);
  288 (* LP *);
  289 (* COMMA *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* NUM *);
  259 (* STR *);
  260 (* ID *);
  261 (* SPACE *);
  262 (* FLOAT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\003\000\003\000\008\000\009\000\009\000\
\009\000\009\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\007\000\007\000\010\000\010\000\
\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\001\000\001\000\003\000\002\000\001\000\
\001\000\003\000\003\000\005\000\004\000\003\000\003\000\003\000\
\001\000\001\000\001\000\001\000\004\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\006\000\002\000\002\000\001\000\002\000\001\000\002\000\001\000\
\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\043\000\000\000\003\000\000\000\001\000\
\002\000\038\000\000\000\000\000\036\000\008\000\004\000\005\000\
\000\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\
\007\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\011\000\000\000\000\000\014\000\006\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\026\000\027\000\036\000\012\000\028\000\
\039\000\044\000"

let yysindex = "\019\000\
\024\255\000\000\036\255\000\000\002\000\000\000\013\255\000\000\
\000\000\000\000\108\255\081\255\000\000\000\000\000\000\000\000\
\021\255\000\000\108\255\051\255\108\255\108\255\046\255\108\255\
\075\255\061\255\182\255\000\000\000\000\108\255\053\255\182\255\
\012\255\153\255\182\255\242\254\000\000\182\255\000\255\043\255\
\000\000\129\255\000\000\061\255\108\255\108\255\108\255\108\255\
\108\255\108\255\108\255\108\255\108\255\108\255\182\255\000\000\
\108\255\108\255\000\000\108\255\046\255\000\000\000\000\000\000\
\100\255\182\255\100\255\100\255\100\255\100\255\072\255\072\255\
\043\255\043\255\182\255\177\255\182\255\000\000\182\255\108\255\
\182\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\094\000\000\000\000\000\000\000\000\000\023\001\
\000\000\000\000\247\254\000\000\000\000\001\255\000\000\049\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\169\000\037\001\193\000\217\000\241\000\009\001\121\000\145\000\
\073\000\097\000\061\001\000\000\035\255\000\000\002\255\000\000\
\085\001"

let yygindex = "\000\000\
\000\000\000\000\251\255\234\255\240\255\000\000\050\000\000\000\
\000\000\000\000"

let yytablesize = 630
let yytable = "\009\000\
\019\000\008\000\032\000\043\000\034\000\035\000\038\000\040\000\
\042\000\059\000\061\000\017\000\015\000\055\000\042\000\029\000\
\010\000\037\000\060\000\001\000\057\000\064\000\011\000\042\000\
\035\000\062\000\017\000\015\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\003\000\007\000\
\075\000\076\000\031\000\077\000\079\000\013\000\014\000\015\000\
\034\000\016\000\017\000\018\000\019\000\020\000\010\000\078\000\
\056\000\021\000\041\000\046\000\003\000\014\000\015\000\081\000\
\016\000\017\000\018\000\041\000\022\000\033\000\023\000\000\000\
\025\000\024\000\013\000\014\000\015\000\025\000\016\000\017\000\
\018\000\019\000\020\000\022\000\029\000\000\000\021\000\000\000\
\046\000\000\000\030\000\000\000\025\000\013\000\000\000\000\000\
\026\000\022\000\000\000\023\000\053\000\054\000\024\000\000\000\
\000\000\041\000\025\000\013\000\014\000\015\000\000\000\016\000\
\017\000\018\000\019\000\020\000\046\000\012\000\000\000\021\000\
\023\000\000\000\000\000\000\000\000\000\000\000\051\000\052\000\
\053\000\054\000\022\000\000\000\023\000\000\000\000\000\024\000\
\000\000\000\000\045\000\025\000\000\000\000\000\000\000\000\000\
\024\000\046\000\047\000\048\000\049\000\050\000\000\000\000\000\
\000\000\000\000\000\000\051\000\052\000\053\000\054\000\063\000\
\000\000\000\000\045\000\000\000\000\000\058\000\000\000\000\000\
\027\000\046\000\047\000\048\000\049\000\050\000\000\000\000\000\
\000\000\000\000\000\000\051\000\052\000\053\000\054\000\000\000\
\000\000\000\000\045\000\000\000\000\000\000\000\080\000\045\000\
\032\000\046\000\047\000\048\000\049\000\050\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\000\000\
\051\000\052\000\053\000\054\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\000\000\019\000\019\000\000\000\019\000\019\000\019\000\
\003\000\019\000\019\000\019\000\019\000\019\000\022\000\000\000\
\019\000\000\000\019\000\019\000\019\000\019\000\019\000\019\000\
\000\000\019\000\035\000\035\000\028\000\035\000\035\000\035\000\
\000\000\035\000\035\000\035\000\035\000\035\000\000\000\000\000\
\035\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
\000\000\035\000\034\000\034\000\021\000\034\000\034\000\034\000\
\000\000\000\000\034\000\034\000\034\000\034\000\000\000\000\000\
\034\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\000\000\034\000\025\000\025\000\033\000\025\000\025\000\025\000\
\000\000\000\000\025\000\025\000\025\000\025\000\000\000\000\000\
\025\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
\013\000\025\000\026\000\026\000\013\000\026\000\026\000\026\000\
\000\000\000\000\026\000\026\000\026\000\026\000\000\000\013\000\
\026\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
\012\000\026\000\023\000\023\000\012\000\023\000\023\000\023\000\
\000\000\000\000\023\000\023\000\023\000\023\000\000\000\012\000\
\023\000\000\000\023\000\023\000\023\000\000\000\000\000\023\000\
\000\000\023\000\024\000\024\000\000\000\024\000\024\000\024\000\
\000\000\000\000\024\000\024\000\024\000\024\000\000\000\000\000\
\024\000\000\000\024\000\024\000\024\000\000\000\000\000\024\000\
\000\000\024\000\027\000\027\000\000\000\027\000\027\000\027\000\
\000\000\000\000\027\000\027\000\027\000\027\000\000\000\000\000\
\027\000\000\000\027\000\000\000\000\000\000\000\000\000\027\000\
\000\000\027\000\032\000\032\000\000\000\032\000\032\000\032\000\
\000\000\000\000\032\000\032\000\032\000\032\000\000\000\000\000\
\032\000\000\000\032\000\000\000\000\000\000\000\000\000\032\000\
\000\000\032\000\031\000\031\000\000\000\031\000\031\000\031\000\
\000\000\000\000\031\000\031\000\031\000\031\000\000\000\000\000\
\031\000\000\000\031\000\000\000\000\000\000\000\000\000\031\000\
\000\000\031\000\029\000\029\000\000\000\029\000\029\000\029\000\
\000\000\000\000\029\000\029\000\029\000\029\000\000\000\000\000\
\029\000\000\000\029\000\000\000\000\000\000\000\000\000\029\000\
\000\000\029\000\030\000\030\000\000\000\030\000\030\000\030\000\
\000\000\000\000\030\000\030\000\030\000\030\000\000\000\000\000\
\030\000\022\000\030\000\022\000\022\000\022\000\000\000\030\000\
\000\000\030\000\000\000\000\000\000\000\000\000\022\000\028\000\
\022\000\028\000\028\000\028\000\000\000\022\000\000\000\022\000\
\000\000\000\000\000\000\000\000\028\000\000\000\028\000\000\000\
\000\000\000\000\000\000\028\000\000\000\028\000\000\000\021\000\
\000\000\021\000\021\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\021\000\000\000\
\000\000\000\000\000\000\021\000\000\000\021\000\000\000\033\000\
\000\000\033\000\033\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\033\000\000\000\
\000\000\000\000\000\000\033\000\000\000\033\000"

let yycheck = "\005\000\
\000\000\000\000\019\000\026\000\021\000\022\000\023\000\024\000\
\025\000\024\001\011\001\011\001\011\001\030\000\024\001\004\001\
\004\001\023\000\033\001\001\000\009\001\044\000\010\001\033\001\
\000\000\026\001\026\001\026\001\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\015\001\004\001\
\057\000\058\000\022\001\060\000\061\000\000\001\001\001\002\001\
\000\000\004\001\005\001\006\001\007\001\008\001\004\001\061\000\
\004\001\012\001\024\001\017\001\015\001\001\001\002\001\080\000\
\004\001\005\001\006\001\033\001\023\001\020\000\025\001\255\255\
\000\000\028\001\000\001\001\001\002\001\032\001\004\001\005\001\
\006\001\007\001\008\001\023\001\004\001\255\255\012\001\255\255\
\017\001\255\255\010\001\255\255\032\001\000\000\255\255\255\255\
\000\000\023\001\255\255\025\001\029\001\030\001\028\001\255\255\
\255\255\031\001\032\001\000\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\008\001\017\001\000\000\255\255\012\001\
\000\000\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\023\001\255\255\025\001\255\255\255\255\028\001\
\255\255\255\255\010\001\032\001\255\255\255\255\255\255\255\255\
\000\000\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\255\255\255\255\010\001\255\255\255\255\013\001\255\255\255\255\
\000\000\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\014\001\010\001\
\000\000\017\001\018\001\019\001\020\001\021\001\017\001\018\001\
\019\001\020\001\021\001\027\001\028\001\029\001\030\001\255\255\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\010\001\011\001\255\255\013\001\014\001\015\001\
\015\001\017\001\018\001\019\001\020\001\021\001\000\000\255\255\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\010\001\011\001\000\000\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\010\001\011\001\000\000\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\010\001\011\001\000\000\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\011\001\033\001\010\001\011\001\015\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\026\001\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\031\001\
\011\001\033\001\010\001\011\001\015\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\026\001\
\024\001\255\255\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\010\001\011\001\255\255\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\027\001\028\001\255\255\255\255\031\001\
\255\255\033\001\010\001\011\001\255\255\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\031\001\
\255\255\033\001\010\001\011\001\255\255\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\031\001\
\255\255\033\001\010\001\011\001\255\255\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\031\001\
\255\255\033\001\010\001\011\001\255\255\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\255\255\255\255\255\255\255\255\031\001\
\255\255\033\001\010\001\011\001\255\255\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\024\001\011\001\026\001\013\001\014\001\015\001\255\255\031\001\
\255\255\033\001\255\255\255\255\255\255\255\255\024\001\011\001\
\026\001\013\001\014\001\015\001\255\255\031\001\255\255\033\001\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\255\255\031\001\255\255\033\001\255\255\011\001\
\255\255\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\255\255\031\001\255\255\033\001\255\255\011\001\
\255\255\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\255\255\
\255\255\255\255\255\255\031\001\255\255\033\001"

let yynames_const = "\
  NOT\000\
  FUN\000\
  ARROW\000\
  EQUAL\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  NOT_EQUAL\000\
  GREATER_EQUAL\000\
  LESS_EQUAL\000\
  LESS\000\
  GREATER\000\
  NAMESPACE\000\
  LS\000\
  RS\000\
  LB\000\
  RB\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  RP\000\
  LP\000\
  COMMA\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  NUM\000\
  STR\000\
  ID\000\
  SPACE\000\
  FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 37 "parser.mly"
                 ( _1 )
# 362 "parser.ml"
               : Ast.expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 40 "parser.mly"
                   ( _1 @ [_2] )
# 370 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 41 "parser.mly"
             ( [_1] )
# 377 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 44 "parser.mly"
                         ( Int _1 )
# 384 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 45 "parser.mly"
                         ( Var _1 )
# 391 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                         ( _2 )
# 398 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 47 "parser.mly"
                         ( Unit )
# 404 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 48 "parser.mly"
                         ( Bool _1 )
# 411 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 49 "parser.mly"
                         ( Float _1 )
# 418 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 50 "parser.mly"
                                 ( NameSpace (_1, _3) )
# 426 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elems) in
    Obj.repr(
# 51 "parser.mly"
                          ( List _2 )
# 433 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fargs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                                              ( Assign (_2, fold_fun _3 _5) )
# 442 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                                        ( Assign (_2, _4) )
# 450 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bcontents) in
    Obj.repr(
# 58 "parser.mly"
                        ( Block _2 )
# 457 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bcontents) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                                     ( _1 @ [_3] )
# 465 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bcontents) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 61 "parser.mly"
                                     ( _1 @ [_3] )
# 473 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                 ( [_1] )
# 480 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 63 "parser.mly"
                 ( [_1] )
# 487 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 67 "parser.mly"
                   ( _1 )
# 494 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 68 "parser.mly"
             ( _1 )
# 501 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                            ( fold_fun _2 _4 )
# 509 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                ( Call (Var "!", [_2]) )
# 516 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                      ( Call (Var ("+"), [_1; _3]) )
# 524 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                       ( Call (Var ("-"), [_1; _3]) )
# 532 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                       ( Call (Var ("*"), [_1; _3]) )
# 540 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                     ( Call (Var ("/"), [_1; _3]) )
# 548 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                       ( Call (Var ("="), [_1; _3]) )
# 556 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                           ( Call (Var ("<>"), [_1; _3]) )
# 564 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                      ( Call (Var ("<"), [_1; _3]) )
# 572 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                         ( Call (Var (">"), [_1; _3]) )
# 580 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                            ( Call (Var ("<="), [_1; _3]) )
# 588 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                               ( Call (Var (">="), [_1; _3]) )
# 596 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                                                 ( Call (Var ("if"), [_2; _4; _6]))
# 605 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                               ( Call (Var ("-"), [Int (0); _2]) )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cargs) in
    Obj.repr(
# 83 "parser.mly"
                                        ( Call (_1, _2) )
# 620 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
          ( failwith 
               (Printf.sprintf "parse error near characters %d-%d"
                    (Parsing.symbol_start ())
                    (Parsing.symbol_end ())) )
# 629 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fargs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "parser.mly"
                 ( _1@ [_2] )
# 637 "parser.ml"
               : 'fargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                 ( [_1] )
# 644 "parser.ml"
               : 'fargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cargs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 95 "parser.mly"
                                         ( _1 @ [_2] )
# 652 "parser.ml"
               : 'cargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 96 "parser.mly"
                                         ( [_1] )
# 659 "parser.ml"
               : 'cargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                        ( _1 @ [_3] )
# 667 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
            ( [_1] )
# 674 "parser.ml"
               : 'elems))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr list)
;;

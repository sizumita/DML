type token =
  | BOOL of (bool)
  | NUM of (int)
  | STR of (string)
  | ID of (string)
  | SPACE of (string)
  | FLOAT of (float)
  | NOT
  | FUN
  | ARROW
  | EQUAL
  | SEMICOLON
  | IF
  | THEN
  | ELSE
  | LET
  | COLON
  | NOT_EQUAL
  | GREATER_EQUAL
  | LESS_EQUAL
  | LESS
  | GREATER
  | LS
  | RS
  | LB
  | RB
  | BAR
  | TYPE
  | OF
  | DOT
  | ALIAS
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | RP
  | LP
  | COMMA
  | POW
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

open Printf
open Ast

# 50 "parser.ml"
let yytransl_const = [|
  263 (* NOT *);
  264 (* FUN *);
  265 (* ARROW *);
  266 (* EQUAL *);
  267 (* SEMICOLON *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* LET *);
  272 (* COLON *);
  273 (* NOT_EQUAL *);
  274 (* GREATER_EQUAL *);
  275 (* LESS_EQUAL *);
  276 (* LESS *);
  277 (* GREATER *);
  278 (* LS *);
  279 (* RS *);
  280 (* LB *);
  281 (* RB *);
  282 (* BAR *);
  283 (* TYPE *);
  284 (* OF *);
  285 (* DOT *);
  286 (* ALIAS *);
  287 (* PLUS *);
  288 (* MINUS *);
  289 (* TIMES *);
  290 (* DIV *);
  291 (* RP *);
  292 (* LP *);
  293 (* COMMA *);
  294 (* POW *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* NUM *);
  259 (* STR *);
  260 (* ID *);
  261 (* SPACE *);
  262 (* FLOAT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\004\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\008\000\008\000\003\000\003\000\003\000\003\000\
\003\000\011\000\011\000\010\000\010\000\010\000\012\000\012\000\
\013\000\014\000\014\000\014\000\014\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\009\000\009\000\015\000\015\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\001\000\003\000\001\000\001\000\001\000\
\002\000\001\000\003\000\002\000\003\000\001\000\001\000\003\000\
\003\000\003\000\005\000\003\000\005\000\006\000\004\000\004\000\
\007\000\005\000\003\000\004\000\003\000\001\000\001\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\001\000\004\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\006\000\002\000\002\000\004\000\
\002\000\001\000\002\000\001\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\000\000\000\000\063\000\000\000\004\000\
\000\000\000\000\000\000\001\000\003\000\058\000\000\000\000\000\
\000\000\000\000\000\000\014\000\006\000\008\000\007\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\000\000\000\057\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\
\017\000\000\000\033\000\013\000\011\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\000\
\000\000\028\000\000\000\000\000\025\000\000\000\000\000\027\000\
\000\000\000\000\000\000\000\000\026\000"

let yydgoto = "\002\000\
\006\000\007\000\008\000\000\000\049\000\033\000\045\000\054\000\
\017\000\041\000\113\000\042\000\035\000\055\000\064\000"

let yysindex = "\018\000\
\006\255\000\000\000\000\018\255\002\255\000\000\002\000\000\000\
\000\255\027\255\062\255\000\000\000\000\000\000\124\003\028\255\
\008\255\004\255\088\255\000\000\000\000\000\000\000\000\210\255\
\000\000\124\003\087\255\124\003\124\003\137\255\124\003\088\003\
\043\255\210\003\000\000\089\255\000\000\124\003\080\255\004\255\
\083\255\000\000\090\255\109\255\210\003\210\003\034\255\134\003\
\253\254\210\003\112\255\000\000\210\003\016\255\053\255\110\255\
\000\000\039\255\159\003\124\003\122\255\125\255\105\255\113\003\
\124\003\124\003\124\003\124\003\124\003\124\003\124\003\124\003\
\124\003\124\003\124\003\124\003\210\003\131\255\120\255\142\255\
\144\255\113\003\124\003\124\003\000\000\124\003\113\003\146\255\
\000\000\173\255\000\000\000\000\000\000\112\255\000\000\105\255\
\056\255\210\003\056\255\056\255\056\255\056\255\247\254\247\254\
\110\255\110\255\110\255\210\003\000\000\142\255\000\000\135\255\
\059\255\113\003\210\003\185\003\210\003\105\255\145\255\000\000\
\210\003\000\000\149\255\152\255\000\000\124\003\113\003\000\000\
\141\255\210\003\105\255\153\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\103\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\027\001\221\000\000\000\000\000\000\000\000\000\008\001\000\000\
\158\002\000\000\000\000\000\000\153\002\191\002\000\000\000\000\
\000\000\058\255\099\255\000\000\071\255\000\000\000\000\001\000\
\000\000\000\000\123\255\065\001\000\000\000\000\039\000\220\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\196\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\
\217\001\229\002\000\002\039\002\077\002\115\002\141\001\179\001\
\115\000\153\000\191\000\234\002\000\000\000\000\000\000\000\000\
\000\000\249\000\012\003\000\000\005\255\072\255\000\000\000\000\
\081\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\003\082\255\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\252\255\000\000\130\000\254\255\241\255\000\000\
\136\000\125\000\000\000\181\255\000\000\000\000\084\000"

let yytablesize = 1272
let yytable = "\034\000\
\054\000\012\000\013\000\014\000\111\000\003\000\010\000\066\000\
\039\000\015\000\046\000\037\000\048\000\050\000\053\000\056\000\
\059\000\038\000\001\000\085\000\004\000\009\000\077\000\073\000\
\074\000\052\000\088\000\061\000\075\000\040\000\063\000\011\000\
\005\000\086\000\122\000\016\000\018\000\037\000\060\000\061\000\
\089\000\061\000\083\000\020\000\021\000\022\000\023\000\060\000\
\025\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\096\000\036\000\090\000\
\029\000\019\000\061\000\115\000\116\000\124\000\117\000\062\000\
\066\000\092\000\121\000\086\000\059\000\091\000\032\000\063\000\
\062\000\036\000\020\000\125\000\118\000\120\000\071\000\072\000\
\073\000\074\000\014\000\034\000\019\000\075\000\062\000\036\000\
\020\000\043\000\076\000\007\000\007\000\007\000\007\000\007\000\
\007\000\034\000\019\000\078\000\080\000\007\000\130\000\096\000\
\082\000\081\000\044\000\007\000\007\000\007\000\007\000\007\000\
\007\000\087\000\007\000\007\000\131\000\094\000\066\000\007\000\
\095\000\007\000\007\000\007\000\007\000\062\000\007\000\109\000\
\007\000\020\000\021\000\022\000\051\000\024\000\025\000\026\000\
\027\000\110\000\039\000\112\000\028\000\119\000\123\000\004\000\
\046\000\128\000\127\000\129\000\132\000\133\000\029\000\062\000\
\030\000\058\000\047\000\005\000\079\000\114\000\000\000\000\000\
\031\000\000\000\000\000\000\000\032\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\000\000\000\000\000\000\
\028\000\000\000\000\000\004\000\000\000\000\000\045\000\000\000\
\000\000\000\000\029\000\000\000\030\000\000\000\000\000\005\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
\032\000\000\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\055\000\023\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\000\000\030\000\000\000\000\000\000\000\000\000\044\000\000\000\
\000\000\031\000\000\000\000\000\000\000\032\000\000\000\000\000\
\056\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\000\054\000\054\000\054\000\054\000\054\000\031\000\
\000\000\000\000\054\000\054\000\000\000\054\000\054\000\054\000\
\004\000\000\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\038\000\054\000\005\000\054\000\000\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\060\000\
\060\000\060\000\060\000\060\000\060\000\000\000\000\000\000\000\
\060\000\060\000\000\000\060\000\060\000\060\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\010\000\060\000\000\000\000\000\000\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\059\000\059\000\059\000\
\059\000\059\000\059\000\000\000\000\000\000\000\059\000\059\000\
\000\000\059\000\059\000\059\000\000\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\010\000\059\000\
\000\000\000\000\000\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\044\000\044\000\044\000\044\000\044\000\
\044\000\000\000\000\000\000\000\044\000\044\000\000\000\044\000\
\044\000\044\000\000\000\000\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\042\000\044\000\000\000\044\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\000\000\000\000\046\000\046\000\000\000\046\000\046\000\046\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\043\000\046\000\000\000\046\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\045\000\
\045\000\045\000\045\000\045\000\045\000\000\000\000\000\000\000\
\045\000\045\000\000\000\045\000\045\000\045\000\000\000\000\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\047\000\045\000\000\000\045\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\055\000\055\000\023\000\
\055\000\055\000\055\000\023\000\055\000\055\000\055\000\055\000\
\055\000\000\000\055\000\000\000\055\000\023\000\055\000\023\000\
\055\000\000\000\055\000\055\000\055\000\055\000\055\000\052\000\
\055\000\055\000\056\000\056\000\000\000\056\000\056\000\056\000\
\000\000\056\000\056\000\056\000\056\000\056\000\000\000\056\000\
\000\000\056\000\031\000\056\000\000\000\056\000\031\000\056\000\
\056\000\056\000\056\000\056\000\000\000\056\000\056\000\000\000\
\031\000\031\000\031\000\000\000\038\000\038\000\051\000\038\000\
\038\000\038\000\000\000\038\000\038\000\038\000\038\000\038\000\
\000\000\038\000\000\000\038\000\000\000\038\000\000\000\000\000\
\000\000\038\000\038\000\038\000\038\000\038\000\000\000\038\000\
\038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\010\000\049\000\010\000\010\000\010\000\
\000\000\010\000\010\000\010\000\010\000\010\000\000\000\010\000\
\000\000\010\000\000\000\010\000\000\000\010\000\000\000\010\000\
\000\000\010\000\010\000\010\000\000\000\010\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\010\000\050\000\010\000\010\000\010\000\000\000\010\000\
\010\000\010\000\010\000\010\000\000\000\010\000\000\000\010\000\
\000\000\010\000\000\000\000\000\000\000\010\000\000\000\010\000\
\010\000\010\000\000\000\010\000\010\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\000\000\000\000\042\000\042\000\
\009\000\042\000\042\000\042\000\000\000\024\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\
\000\000\042\000\000\000\042\000\042\000\000\000\000\000\042\000\
\042\000\042\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\000\000\000\000\043\000\043\000\041\000\043\000\
\043\000\043\000\000\000\021\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\043\000\000\000\043\000\
\000\000\043\000\043\000\000\000\000\000\043\000\043\000\043\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\047\000\047\000\048\000\047\000\047\000\047\000\
\000\000\022\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\047\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\047\000\047\000\047\000\000\000\000\000\
\052\000\052\000\052\000\052\000\052\000\052\000\000\000\000\000\
\000\000\052\000\052\000\040\000\052\000\052\000\052\000\000\000\
\000\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\000\000\052\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\052\000\052\000\052\000\000\000\000\000\051\000\
\051\000\051\000\051\000\051\000\051\000\000\000\000\000\000\000\
\051\000\051\000\053\000\051\000\051\000\051\000\000\000\000\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\051\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\051\000\051\000\051\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\000\000\000\000\000\000\049\000\049\000\
\000\000\049\000\049\000\049\000\000\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\049\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\000\000\000\000\000\000\050\000\050\000\000\000\050\000\
\050\000\050\000\000\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\000\000\050\000\000\000\050\000\
\000\000\000\000\000\000\000\000\000\000\050\000\050\000\050\000\
\000\000\009\000\009\000\009\000\009\000\009\000\009\000\000\000\
\000\000\000\000\000\000\009\000\000\000\009\000\009\000\009\000\
\024\000\000\000\000\000\000\000\024\000\000\000\009\000\009\000\
\009\000\009\000\000\000\009\000\000\000\009\000\024\000\000\000\
\024\000\000\000\000\000\009\000\009\000\009\000\000\000\041\000\
\041\000\041\000\041\000\041\000\041\000\000\000\000\000\000\000\
\000\000\041\000\000\000\041\000\041\000\041\000\021\000\000\000\
\000\000\000\000\021\000\000\000\041\000\041\000\041\000\041\000\
\000\000\041\000\000\000\041\000\021\000\000\000\021\000\000\000\
\000\000\041\000\041\000\041\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\000\000\000\000\000\000\000\000\048\000\
\000\000\048\000\048\000\048\000\022\000\000\000\000\000\000\000\
\022\000\000\000\048\000\048\000\048\000\048\000\000\000\048\000\
\000\000\048\000\022\000\000\000\022\000\000\000\000\000\048\000\
\048\000\048\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\000\000\000\000\000\000\040\000\000\000\
\040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\040\000\040\000\040\000\000\000\040\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\
\040\000\000\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\000\000\000\000\000\000\000\000\053\000\000\000\053\000\
\053\000\053\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\053\000\053\000\053\000\000\000\053\000\000\000\053\000\
\000\000\000\000\000\000\000\000\000\000\053\000\053\000\053\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\000\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\030\000\
\000\000\020\000\021\000\022\000\023\000\060\000\025\000\031\000\
\000\000\000\000\057\000\032\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\000\000\000\000\029\000\028\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\000\000\029\000\084\000\030\000\032\000\000\000\066\000\067\000\
\068\000\069\000\070\000\031\000\000\000\000\000\000\000\032\000\
\000\000\000\000\000\000\000\000\071\000\072\000\073\000\074\000\
\065\000\000\000\000\000\075\000\000\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\071\000\072\000\073\000\
\074\000\093\000\065\000\000\000\075\000\000\000\126\000\000\000\
\000\000\066\000\067\000\068\000\069\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\
\072\000\073\000\074\000\065\000\000\000\000\000\075\000\000\000\
\000\000\000\000\066\000\067\000\068\000\069\000\070\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\072\000\073\000\074\000\000\000\000\000\000\000\075\000"

let yycheck = "\015\000\
\000\000\000\000\007\000\004\001\080\000\000\001\005\001\017\001\
\005\001\010\001\026\000\004\001\028\000\029\000\030\000\031\000\
\032\000\010\001\001\000\023\001\015\001\004\001\038\000\033\001\
\034\001\030\000\011\001\023\001\038\001\026\001\033\000\030\001\
\027\001\037\001\110\000\036\001\010\001\004\001\000\000\035\001\
\025\001\037\001\009\001\001\001\002\001\003\001\004\001\005\001\
\006\001\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\064\000\035\001\011\001\
\022\001\004\001\024\001\083\000\084\000\011\001\086\000\029\001\
\017\001\035\001\090\000\037\001\000\000\025\001\036\001\082\000\
\023\001\011\001\011\001\025\001\087\000\090\000\031\001\032\001\
\033\001\034\001\004\001\011\001\011\001\038\001\037\001\025\001\
\025\001\010\001\010\001\001\001\002\001\003\001\004\001\005\001\
\006\001\025\001\025\001\028\001\026\001\011\001\126\000\114\000\
\004\001\024\001\000\000\017\001\018\001\019\001\020\001\021\001\
\022\001\010\001\024\001\025\001\127\000\004\001\017\001\029\001\
\004\001\031\001\032\001\033\001\034\001\029\001\036\001\005\001\
\038\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\026\001\005\001\004\001\012\001\004\001\016\001\015\001\
\000\000\005\001\010\001\004\001\016\001\005\001\022\001\037\001\
\024\001\032\000\027\000\027\001\040\000\082\000\255\255\255\255\
\032\001\255\255\255\255\255\255\036\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\012\001\255\255\255\255\015\001\255\255\255\255\000\000\255\255\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\027\001\
\255\255\255\255\255\255\255\255\032\001\255\255\255\255\255\255\
\036\001\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\000\000\000\000\012\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\024\001\255\255\255\255\255\255\255\255\029\001\255\255\
\255\255\032\001\255\255\255\255\255\255\036\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\000\000\
\255\255\255\255\010\001\011\001\255\255\013\001\014\001\015\001\
\015\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\000\000\027\001\027\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\010\001\011\001\255\255\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\000\000\027\001\255\255\255\255\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\255\255\010\001\011\001\
\255\255\013\001\014\001\015\001\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\000\000\027\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\255\255\255\255\010\001\011\001\255\255\013\001\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\000\000\027\001\255\255\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\001\001\002\001\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\010\001\011\001\255\255\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\000\000\027\001\255\255\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\010\001\011\001\255\255\013\001\014\001\015\001\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\000\000\027\001\255\255\029\001\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\010\001\011\001\011\001\
\013\001\014\001\015\001\015\001\017\001\018\001\019\001\020\001\
\021\001\255\255\023\001\255\255\025\001\025\001\027\001\027\001\
\029\001\255\255\031\001\032\001\033\001\034\001\035\001\000\000\
\037\001\038\001\010\001\011\001\255\255\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\011\001\027\001\255\255\029\001\015\001\031\001\
\032\001\033\001\034\001\035\001\255\255\037\001\038\001\255\255\
\025\001\026\001\027\001\255\255\010\001\011\001\000\000\013\001\
\014\001\015\001\255\255\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\255\255\025\001\255\255\027\001\255\255\255\255\
\255\255\031\001\032\001\033\001\034\001\035\001\255\255\037\001\
\038\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\000\000\013\001\014\001\015\001\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\027\001\255\255\029\001\255\255\031\001\
\255\255\033\001\034\001\035\001\255\255\037\001\038\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\000\000\013\001\014\001\015\001\255\255\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\255\255\025\001\
\255\255\027\001\255\255\255\255\255\255\031\001\255\255\033\001\
\034\001\035\001\255\255\037\001\038\001\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\255\255\010\001\011\001\
\000\000\013\001\014\001\015\001\255\255\000\000\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\027\001\
\255\255\029\001\255\255\031\001\032\001\255\255\255\255\035\001\
\036\001\037\001\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\255\255\255\255\010\001\011\001\000\000\013\001\
\014\001\015\001\255\255\000\000\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\027\001\255\255\029\001\
\255\255\031\001\032\001\255\255\255\255\035\001\036\001\037\001\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\010\001\011\001\000\000\013\001\014\001\015\001\
\255\255\000\000\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\027\001\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\255\255\255\255\
\255\255\010\001\011\001\000\000\013\001\014\001\015\001\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\255\255\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\010\001\011\001\000\000\013\001\014\001\015\001\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\027\001\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\255\255\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\255\255\010\001\011\001\
\255\255\013\001\014\001\015\001\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\027\001\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\255\255\255\255\010\001\011\001\255\255\013\001\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\027\001\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\255\255\011\001\255\255\013\001\014\001\015\001\
\011\001\255\255\255\255\255\255\015\001\255\255\022\001\023\001\
\024\001\025\001\255\255\027\001\255\255\029\001\025\001\255\255\
\027\001\255\255\255\255\035\001\036\001\037\001\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\255\255\011\001\255\255\013\001\014\001\015\001\011\001\255\255\
\255\255\255\255\015\001\255\255\022\001\023\001\024\001\025\001\
\255\255\027\001\255\255\029\001\025\001\255\255\027\001\255\255\
\255\255\035\001\036\001\037\001\255\255\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\255\255\255\255\011\001\
\255\255\013\001\014\001\015\001\011\001\255\255\255\255\255\255\
\015\001\255\255\022\001\023\001\024\001\025\001\255\255\027\001\
\255\255\029\001\025\001\255\255\027\001\255\255\255\255\035\001\
\036\001\037\001\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\255\255\255\255\255\255\255\255\011\001\255\255\
\013\001\014\001\015\001\255\255\255\255\255\255\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\255\255\027\001\255\255\
\029\001\255\255\255\255\255\255\255\255\255\255\035\001\036\001\
\037\001\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\255\255\255\255\255\255\011\001\255\255\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\023\001\024\001\025\001\255\255\027\001\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\012\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\024\001\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\032\001\
\255\255\255\255\035\001\036\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\255\255\255\255\022\001\012\001\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\255\255\022\001\013\001\024\001\036\001\255\255\017\001\018\001\
\019\001\020\001\021\001\032\001\255\255\255\255\255\255\036\001\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\034\001\
\010\001\255\255\255\255\038\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\033\001\
\034\001\035\001\010\001\255\255\038\001\255\255\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\010\001\255\255\255\255\038\001\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\255\255\255\255\255\255\038\001"

let yynames_const = "\
  NOT\000\
  FUN\000\
  ARROW\000\
  EQUAL\000\
  SEMICOLON\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  COLON\000\
  NOT_EQUAL\000\
  GREATER_EQUAL\000\
  LESS_EQUAL\000\
  LESS\000\
  GREATER\000\
  LS\000\
  RS\000\
  LB\000\
  RB\000\
  BAR\000\
  TYPE\000\
  OF\000\
  DOT\000\
  ALIAS\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  RP\000\
  LP\000\
  COMMA\000\
  POW\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  NUM\000\
  STR\000\
  ID\000\
  SPACE\000\
  FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 38 "parser.mly"
                 ( _1 )
# 556 "parser.ml"
               : Ast.expr list))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parser.mly"
          ( failwith 
               (Printf.sprintf "parse error near characters %d-%d"
                    (Parsing.symbol_start ())
                    (Parsing.symbol_end ())) )
# 565 "parser.ml"
               : Ast.expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 46 "parser.mly"
                   ( _1 @ [_2] )
# 573 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 47 "parser.mly"
             ( [_1] )
# 580 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elems) in
    Obj.repr(
# 50 "parser.mly"
                    ( _2 )
# 587 "parser.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 53 "parser.mly"
                         ( Int _1 )
# 594 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                         ( Var _1 )
# 601 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                         ( String _1 )
# 608 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                                            ( TypeVarof (_1, _2) )
# 616 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "parser.mly"
                                    ( TypeVar _1 )
# 623 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                         ( _2 )
# 630 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                         ( Unit )
# 636 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elems) in
    Obj.repr(
# 60 "parser.mly"
                                           ( Tuple _2 )
# 643 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 61 "parser.mly"
                         ( Bool _1 )
# 650 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 62 "parser.mly"
                         ( Float _1 )
# 657 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elems) in
    Obj.repr(
# 63 "parser.mly"
                          ( List _2 )
# 664 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'struct_values) in
    Obj.repr(
# 64 "parser.mly"
                                  ( StructValue _2 )
# 671 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'simple_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "parser.mly"
                                 ( BuildinCall (Var ("get"), [_1; String ("\"" ^ _3 ^ "\"")]))
# 679 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'struct_values) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 68 "parser.mly"
                                                             ( _1 @ [(_3, _5)] )
# 688 "parser.ml"
               : 'struct_values))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 69 "parser.mly"
                                     ( [(_1, _3)] )
# 696 "parser.ml"
               : 'struct_values))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fargs) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                                              ( Assign (_2, Fun (_3, _5)) )
# 705 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                                              ( Assign (_2, Fun (["_"], _6)) )
# 713 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                                        ( Assign (_2, _4) )
# 721 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'types) in
    Obj.repr(
# 76 "parser.mly"
                              ( Types (_2, _4) )
# 729 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'defstruct) in
    Obj.repr(
# 77 "parser.mly"
                                           ( StructType(_3, _6) )
# 737 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'defstruct) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
                                               ( _1 @ [(_3, _5)] )
# 746 "parser.ml"
               : 'defstruct))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 81 "parser.mly"
                           ( [(_1, _3)])
# 754 "parser.ml"
               : 'defstruct))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'types) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typed) in
    Obj.repr(
# 84 "parser.mly"
                            ( _2 @ [_4] )
# 762 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'types) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typed) in
    Obj.repr(
# 85 "parser.mly"
                        ( _1 @ [_3] )
# 770 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typed) in
    Obj.repr(
# 86 "parser.mly"
              ( [_1] )
# 777 "parser.ml"
               : 'types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
              ( Type _1 )
# 784 "parser.ml"
               : 'typed))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parser.mly"
                       ( Typeof (_1, _3) )
# 792 "parser.ml"
               : 'typed))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bcontents) in
    Obj.repr(
# 93 "parser.mly"
                        ( Block _2 )
# 799 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bcontents) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                     ( _1 @ [_3] )
# 807 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bcontents) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 97 "parser.mly"
                                     ( _1 @ [_3] )
# 815 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                 ( [_1] )
# 822 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 99 "parser.mly"
                 ( [_1] )
# 829 "parser.ml"
               : 'bcontents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 103 "parser.mly"
                   ( _1 )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 104 "parser.mly"
             ( _1 )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                            ( Fun (_2, _4) )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                ( Call (Var "!", [_2]) )
# 858 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                      ( BuildinCall (Var ("+"), [_1; _3]) )
# 866 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                       ( BuildinCall (Var ("-"), [_1; _3]) )
# 874 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                       ( BuildinCall (Var ("*"), [_1; _3]) )
# 882 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( BuildinCall (Var ("**"), [_1; _3]) )
# 890 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( BuildinCall (Var ("/"), [_1; _3]) )
# 898 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                       ( BuildinCall (Var ("="), [_1; _3]) )
# 906 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                           ( BuildinCall (Var ("<>"), [_1; _3]) )
# 914 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                      ( BuildinCall (Var ("<"), [_1; _3]) )
# 922 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                         ( BuildinCall (Var (">"), [_1; _3]) )
# 930 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                            (BuildinCall (Var ("<="), [_1; _3]) )
# 938 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                               ( BuildinCall (Var (">="), [_1; _3]) )
# 946 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                                                 ( BuildinCall (Var ("if"), [_2; _4; _6]))
# 955 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                               ( BuildinCall (Var ("-"), [Int (0); _2]) )
# 962 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cargs) in
    Obj.repr(
# 120 "parser.mly"
                                        ( Call (_1, _2) )
# 970 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cargs) in
    Obj.repr(
# 121 "parser.mly"
                                         ( BuildinCall (Var (_1 ^ "_" ^ _3), _4) )
# 979 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fargs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 124 "parser.mly"
                 ( _1 @ [_2] )
# 987 "parser.ml"
               : 'fargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parser.mly"
                 ( [_1] )
# 994 "parser.ml"
               : 'fargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cargs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 128 "parser.mly"
                                         ( _1 @ [_2] )
# 1002 "parser.ml"
               : 'cargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 129 "parser.mly"
                                         ( [_1] )
# 1009 "parser.ml"
               : 'cargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                        ( _1 @ [_3] )
# 1017 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
            ( [_1] )
# 1024 "parser.ml"
               : 'elems))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr list)
;;
